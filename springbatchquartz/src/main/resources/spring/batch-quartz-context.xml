<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/batch
	http://www.springframework.org/schema/batch/spring-batch-3.0.xsd
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	">
	<!-- 
	/** 
	* @FileName: batch-quartz-context.xml 
	* @Description: 配置定时批量处理
	* @author zhengfucheng 
	* @date 2017-3-6 下午4:50:29 
	* @version V1.0 
	*/ 
	添加第三方jar包： 
		1. javax.batch-api-1.0.jar 
		2. quartz-1.8.6.jar 
		3. spring-batch-core-3.0.4.RELEASE.jar 
		4. spring-batch-infrastructure-3.0.4.RELEASE.jar 
		5. spring-context-support-3.2.7.RELEASE.jar 
		6. spring-retry-1.1.2.RELEASE.jar 
	-->


	<!-- 配置 Job -->
	<batch:job id="batchJob">
		<!-- 可以按照步骤来配置，step 可以有继承，抽象关系，可以使用 parent 和 abstract 参数 -->
		<!-- 目前只定义了简单的一步 -->
		<batch:step id="step1">
			<batch:tasklet>
				<!-- commit-interval 代表每读取多少次然后提交一次 -->
				<!-- chunk-completion-policy 代表步骤结束的条件  -->
				<batch:chunk 
				reader="readerTask"
				processor="processorTask"
				writer="writerTask"
				commit-interval="1" />
			</batch:tasklet>
		</batch:step>
	</batch:job>
	
	<!-- 配置数据处理入口  -->
	<bean id="readerTask" class="com.sightcorner.springbatchquartz.task.ReaderTask"></bean>
	<!-- 配置数据处理过程  -->
	<bean id="processorTask" class="com.sightcorner.springbatchquartz.task.ProcessorTask"></bean>
	<!-- 配饰数据处理输出  -->
	<bean id="writerTask" class="com.sightcorner.springbatchquartz.task.WriterTask"></bean>



	<!-- 用的是简单的 SimpleJobLauncher -->
	<bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>

	<!-- 事务管理 -->
	<bean id="transactionManager" class="org.springframework.batch.support.transaction.ResourcelessTransactionManager" />
	
	<!-- 目前使用不需要数据库的 jobRepository，如果有需要，也可以配置需要绑定数据库的批量处理  -->
	<bean id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
		<property name="transactionManager" ref="transactionManager" />
	</bean>

	<!-- 使用 MapJobRegistry -->
	<bean id="jobRegistry" class="org.springframework.batch.core.configuration.support.MapJobRegistry" />

	<bean class="org.springframework.batch.core.configuration.support.JobRegistryBeanPostProcessor">
		<property name="jobRegistry" ref="jobRegistry" />
	</bean>

	<!-- 配置 jobDetail -->
	<bean id="jobDetail" class="org.springframework.scheduling.quartz.JobDetailBean">
		<!-- 使用自定义的 QuartzJobBean -->
		<property name="jobClass" value="com.sightcorner.springbatchquartz.JobScheduler" />

		<property name="jobDataAsMap">
			<map>
				<!-- 使用自定义的 Job -->
				<entry key="jobName" value="batchJob"></entry>
				<!--  -->
				<entry key="jobLauncher" value-ref="jobLauncher"></entry>
				<!--  -->
				<entry key="jobLocator" value-ref="jobRegistry"></entry>
			</map>
		</property>
	</bean>

	<!-- 定时器，设定每5秒，定时调用 jobDetail -->
	<bean id="SpringJobSchedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<!-- 使用 CronTrigger -->
				<bean id="coreTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
					<!-- 参数 -->
					<property name="jobDetail" ref="jobDetail"></property>
					<!-- 配置时间，可以设置为定点或者定时触发 -->
					<!-- 目前设定为每半小时触发一次，如果需要改动此值，请查阅 quartz-1.8.6 的文档 -->
					<property name="cronExpression" value="0/5 * * * * ?"></property>
					<!-- 设置开始的延迟事件，目前设置为启动服务器后的60秒后启动，单位为毫秒 -->
					<property name="startDelay" value="1000" />
				</bean>
			</list>
		</property>
	</bean>
	
</beans>